import { Anthropic } from "@anthropic-ai/sdk";
import {MessageParam,Tool} from "@anthropic-ai/sdk/resources/messages/messages.mjs";
import { Client } from "@modelcontextprotocol/sdk/client/index.js";
import { StdioClientTransport } from "@modelcontextprotocol/sdk/client/stdio.js";
import readline from "readline/promises";
import dotenv from "dotenv";

dotenv.config();

const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;
if (!ANTHROPIC_API_KEY) {
    throw new Error("ANTHROPIC_API_KEY is not set");
}

class MCPClient {
    private mcp: Client;
    private anthropic: Anthropic;
    private transport: StdioClientTransport | null = null;
    private tools: Tool[] = [];

    constructor() {
        this.anthropic = new Anthropic({
            apiKey: ANTHROPIC_API_KEY,
        });
        this.mcp = new Client({ name: "mcp-client-cli", version: "1.0.0" });
    }

    async connectToServer(serverScriptPath: string) {
        try {
            const isJs = serverScriptPath.endsWith(".js");
            const isPy = serverScriptPath.endsWith(".py");
            if (!isJs && !isPy) {
                throw new Error("Server script must be a .js or .py file");
            }

            console.log("Attempting to connect to server:", serverScriptPath);
            console.log("Platform:", process.platform);

            const command = isPy
                ? process.platform === "win32"
                    ? "python"
                    : "python3"
                : process.execPath;

            console.log("Using command:", command);
            console.log("With args:", [serverScriptPath]);

            this.transport = new StdioClientTransport({
                command,
                args: [serverScriptPath],
            });

            console.log("Initializing transport...");
            await this.mcp.connect(this.transport);
            console.log("Connected to transport");

            console.log("Listing tools...");
            const toolsResult = await this.mcp.listTools();
            this.tools = toolsResult.tools.map((tool) => {
                return {
                    name: tool.name,
                    description: tool.description,
                    input_schema: tool.inputSchema,
                };
            });
            console.log(
                "Connected to server with tools:",
                this.tools.map(({ name }) => name)
            );
        } catch (e) {
            console.error("Failed to connect to MCP server:");
            console.error("Error details:", e);
            if (e instanceof Error) {
                console.error("Stack trace:", e.stack);
            }
            throw e;
        }
    }

    async init() {
        // Register tools with MCP
        const toolList = await this.mcp.listTools();
        this.tools = Array.isArray(toolList) ? toolList : [];

        // Start listening for messages
        await this.startMessageLoop();
    }

    private async startMessageLoop() {
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        while (true) {
            try {
                const input = await rl.question('User: ');
                if (input.toLowerCase() === 'exit') {
                    break;
                }
                await this.handleMessage(input);
            } catch (error) {
                console.error('Error processing message:', error);
            }
        }

        rl.close();
    }

    private async handleMessage(userInput: string) {
        try {
            const response = await this.anthropic.messages.create({
                model: "claude-3-sonnet-20240229",
                max_tokens: 4096,
                temperature: 0,
                messages: [{ role: "user", content: userInput }],
                tools: this.tools
            });

            const content = response.content[0];
            if (content.type === 'text') {
                console.log('Assistant:', content.text);
            } else if (content.type === 'tool_use') {
                const toolParams = {
                    name: content.name,
                    arguments: content.input as { [key: string]: unknown } || {},
                    _meta: {}
                };
                const result = await this.mcp.callTool(toolParams);
                console.log('Tool result:', result);
            }
        } catch (error) {
            console.error('Error handling message:', error);
            throw error;
        }
    }

    async processQuery(query: string) {
        const messages: MessageParam[] = [
            {
                role: "user",
                content: query,
            },
        ];

        const response = await this.anthropic.messages.create({
            model: "claude-3-sonnet-20240229",
            max_tokens: 1000,
            messages,
            tools: this.tools,
        });

        const finalText = [];
        const toolResults = [];

        for (const content of response.content) {
            if (content.type === "text") {
                finalText.push(content.text);
            } else if (content.type === "tool_use") {
                const toolName = content.name;
                const toolArgs = content.input as { [x: string]: unknown } | undefined;

                const result = await this.mcp.callTool({
                    name: toolName,
                    arguments: toolArgs,
                });
                toolResults.push(result);
                finalText.push(
                    `[Calling tool ${toolName} with args ${JSON.stringify(toolArgs)}]`
                );

                messages.push({
                    role: "user",
                    content: result.content as string,
                });

                const followUpResponse = await this.anthropic.messages.create({
                    model: "claude-3-sonnet-20240229",
                    max_tokens: 1000,
                    messages,
                });

                finalText.push(
                    followUpResponse.content[0].type === "text"
                        ? followUpResponse.content[0].text
                        : ""
                );
            }
        }

        return finalText.join("\n");
    }

    async chatLoop() {
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
        });

        try {
            console.log("\nMCP Client Started!");
            console.log("Type your queries or 'quit' to exit.");

            while (true) {
                const message = await rl.question("\nQuery: ");
                if (message.toLowerCase() === "quit") {
                    break;
                }
                const response = await this.processQuery(message);
                console.log("\n" + response);
            }
        } finally {
            rl.close();
        }
    }

    async cleanup() {
        await this.mcp.close();
    }
}

async function main() {
    if (process.argv.length < 3) {
        console.log("Usage: npm start -- <path_to_server_script>");
        return;
    }

    const serverScriptPath = process.argv[2];
    console.log("Starting MCP client with server script:", serverScriptPath);

    const mcpClient = new MCPClient();
    try {
        await mcpClient.connectToServer(serverScriptPath);
        await mcpClient.chatLoop();
    } finally {
        await mcpClient.cleanup();
        process.exit(0);
    }
}

main().catch(error => {
    console.error("Fatal error:", error);
    process.exit(1);
});



